params {
        help = false

        outdir="results"

        run_name = false

	bam = false
	samples = false

	hifi = false
	hifi_min_passes = false

	qc = false
	qc_kat = false

	reference = false
	gff = false

	genome_size = false

	trimming = false

        maxMultiqcEmailFileSize = 25.MB

        plaintext_email = false

	large = false	

	flye = false
	canu = false
	hifiasm = false
	ipa = false
}

/*
Specify the relevant config based on execution context
*/
profiles {
        standard {
                includeConfig 'conf/base.config'
                includeConfig 'conf/medcluster.config'
        }
	assembly {
		includeConfig 'conf/base.config'
		includeConfig 'conf/assemblycluster.config'
	}
}

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/Flye_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/Flye_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/Flye_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/Flye_dag.svg"
}


manifest {
        homePage = 'https://github.com/ikmb/flye-assembly.git'
        description = 'This pipeline assembles genomes from PacBio long reads'
	mainScript = 'main.nf'
        version = '1.1'
        nextflowVersion = '20.01.0'
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 250.GB
  max_cpus = 24
  max_time = 240.h
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

